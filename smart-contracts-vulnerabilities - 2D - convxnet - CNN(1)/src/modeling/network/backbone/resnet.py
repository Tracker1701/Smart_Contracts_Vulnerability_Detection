from torch import nn
from torchvision import models

from src.utils.registry import REGISTRY
from timm import create_model


@REGISTRY.register('resnet')
class ResNetModel(nn.Module):
    def __init__(self, num_classes=5, classify=True):
        super(ResNetModel, self).__init__()

        # onnx_model.graph.input[0].type.tensor_type.shape.dim[0].dim_param = 'None'
        # onnx_model.graph.output[0].type.tensor_type.shape.dim[0].dim_param = 'None'


        pytorch_model = create_model('convnext_tiny', pretrained=True).to('cuda')
        #self.resnet = models.resnet18(pretrained=True)
        self.ConvXnet= pytorch_model



        if classify:

            #self.resnet.fc = nn.Sequential()
            self.classifier = nn.Linear(in_features=512, out_features=num_classes)
            self.classifier2 = nn.Linear(in_features=1000, out_features=num_classes)
        else:
            features = nn.ModuleList(self.resnet.children())[:-1]
            #self.resnet = nn.Sequential(*features).append(nn.Flatten())

    def forward(self, inputs):
        # vec = self.resnet(inputs)
        # classify = self.classifier(vec)

        vec = self.ConvXnet(inputs)
        classify = self.classifier2(vec)
        return vec, classify

    def get_layer_groups(self):
        linear_layers = [elem[1] for elem in
                         filter(lambda param_tuple: 'fc' in param_tuple[0], self.ConvXnet.named_parameters())]
        other_layers = [elem[1] for elem in
                        filter(lambda param_tuple: 'fc' not in param_tuple[0], self.ConvXnet.named_parameters())]
        param_groups = {
            'classifier': linear_layers,
            'feature_extractor': other_layers
        }
        return param_groups
